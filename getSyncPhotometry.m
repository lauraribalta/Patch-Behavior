% this function takes the digitalin.dat file generated by the Intan
% software and the photometry preprocessed data (generated by python
% preprocessing script).
%NOTE: current directory must be the session folder with both files

function syncPhotometry = getSyncPhotometry(intanData='digitalin.dat', photometryData)
    format long
    %Extract barcode data from Intan file
    srIntan = 30000;
    m = memmapfile(intanData,'Format','uint16','writable',false);
    digital_word2 = double(m.Data);
    clear m
    Nchan = 16;
    Nchan2 = 17;
    for k = 1:Nchan
        tester(:,Nchan2-k) = (digital_word2 - 2^(Nchan-k))>=0;
        digital_word2 = digital_word2 - tester(:,Nchan2-k)*2^(Nchan-k);
        test = tester(:,Nchan2-k) == 1;
        barcode{Nchan2-k} = tester(:,Nchan2-k) == 1;
    end
    
    barcodeIntan = barcode{13}; %High/low signal

    %Extract barcode data from Pyphotometry preprocessed file
    load(photometryData);
    srPhot = photometryData.sampling_rate; %Get samplingrate
    barcodePhot = photometryData.highLow; %High/low signal
        
    % Resample barcodePhot to match the sampling rate of barcodeIntan
    % (130Hz-->30kHz)
    barcodePhotResampled = (resample(double(barcodePhot), double(srIntan), double(srPhot)))';
    barcodePhotResampled = round(barcodePhotResampled);

    % Cross-correlation
    [xcorrValues, lags] = xcorr(barcodeIntan, barcodePhotResampled);
    [maxCorr, maxCorrIndex] = max(xcorrValues);
    maxLag = lags(maxCorrIndex); %lag between signals with higher correlation
    
    %Get sync photometry timestamps at 30kHz
    photTimestampsSr = (1+maxLag:length(barcodePhotResampled)+maxLag)'; %sr
    %Downsample back to 130Hz
    samplingFactor = round(srIntan / srPhot); 
    syncPhotometry = resample(photTimestampsSr, double(srPhot), double(srIntan));
end
